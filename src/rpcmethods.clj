;; CLN v23.11 - RPC methods generated from doc/schemas directory
;;
;; Do not edit this file directly.
;; See clnrpc-utils/generate-rpcmethods.

(in-ns 'clnrpc-clj)

(def rpcmethods
  ["addgossip" "addpsbtoutput" "autoclean-once" "autoclean-status"
   "autocleaninvoice" "batching" "blacklistrune" "checkmessage" "checkrune"
   "close" "commando-blacklist" "commando-listrunes" "commando-rune" "commando"
   "connect" "createinvoice" "createonion" "createrune" "datastore"
   "datastoreusage" "decode" "decodepay" "deldatastore" "delexpiredinvoice"
   "delforward" "delinvoice" "delpay" "disableinvoicerequest" "disconnect"
   "emergencyrecover" "feerates" "fetchinvoice" "fundchannel" "fundpsbt"
   "getinfo" "getroute" "invoice" "invoicerequest" "keysend" "listchannels"
   "listclosedchannels" "listdatastore" "listforwards" "listfunds" "listhtlcs"
   "listinvoicerequests" "listinvoices" "listnodes" "listpays"
   "listpeerchannels" "listpeers" "listsendpays" "listsqlschemas"
   "listtransactions" "makesecret" "newaddr" "pay" "ping" "preapproveinvoice"
   "preapprovekeysend" "recoverchannel" "sendcustommsg" "sendonion" "sendpay"
   "sendpsbt" "setchannel" "setconfig" "showrunes" "signinvoice" "signmessage"
   "signpsbt" "splice_init" "splice_signed" "splice_update" "sql" "staticbackup"
   "stop" "txdiscard" "txprepare" "txsend" "upgradewallet" "utxopsbt" "wait"
   "waitanyinvoice" "waitblockheight" "waitinvoice" "waitsendpay" "withdraw"])

(defn addgossip
  "Send addgossip request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  MESSAGE
      - type: hex
      - description: The raw, hex-encoded, gossip message to add to the local gossip view."
  [rpc-info message]
  (call rpc-info "addgossip" {:message message}))

(defn addpsbtoutput
  "Send addpsbtoutput request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  SATOSHI
      - type: msat
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :locktime
      - type: u32
      - description:

  :initialpsbt
      - type: string
      - description: the (optional) base 64 encoded PSBT to begin with. If not specified, one will be generated automatically

  :destination
      - type: string
      - description:"
  [rpc-info satoshi & opt-params]
  (call rpc-info
        "addpsbtoutput"
        (merge {:satoshi satoshi} (apply hash-map opt-params))))

(defn autoclean-once
  "Send autoclean-once request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  SUBSYSTEM
      - type: string
      - description: What subsystem to clean

  AGE
      - type: u64
      - description: How many seconds old an entry must be to delete it"
  [rpc-info subsystem age]
  (call rpc-info "autoclean-once" {:subsystem subsystem, :age age}))

(defn autoclean-status
  "Send autoclean-status request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :subsystem
      - type: string
      - description: What subsystem to ask about"
  [rpc-info & opt-params]
  (call rpc-info "autoclean-status" (apply hash-map opt-params)))

(defn autocleaninvoice
  "Send autocleaninvoice request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :expired_by
      - type: u64
      - description: How long an invoice must be expired (seconds) before we delete it.

  :cycle_seconds
      - type: u64
      - description: The interval (in seconds) between cleaning expired invoices"
  [rpc-info & opt-params]
  (call rpc-info "autocleaninvoice" (apply hash-map opt-params)))

(defn batching
  "Send batching request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  ENABLE
      - type: boolean
      - description: Whether to enable or disable transaction batching"
  [rpc-info enable]
  (call rpc-info "batching" {:enable enable}))

(defn blacklistrune
  "Send blacklistrune request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :start
      - type: u64
      - description: first rune unique id to blacklist

  :end
      - type: u64
      - description: final rune unique id to blacklist (defaults to start)"
  [rpc-info & opt-params]
  (call rpc-info "blacklistrune" (apply hash-map opt-params)))

(defn checkmessage
  "Send checkmessage request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  MESSAGE
      - type: string
      - description: Message to be checked against the signature.

  ZBASE
      - type: string
      - description: The Zbase32 encoded signature to verify.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :pubkey
      - type: pubkey
      - description: The Zbase32 encoded signature to verify."
  [rpc-info message zbase & opt-params]
  (call rpc-info
        "checkmessage"
        (merge {:message message, :zbase zbase} (apply hash-map opt-params))))

(defn checkrune
  "Send checkrune request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  RUNE
      - type: string
      - description: rune to check for authorization

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :nodeid
      - type: string
      - description: node id of requesting node *(required until v23.11)*

  :method
      - type: string
      - description: method for which rune needs to be validated *(required until v23.11)*

  :params
      - type: array
      - description: array of positional parameters

      or

      - type: object
      - description: parameters for method"
  [rpc-info rune & opt-params]
  (call rpc-info "checkrune" (merge {:rune rune} (apply hash-map opt-params))))

(defn close
  "Send close request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  ID
      - type: string
      - description: peer id, channel id or short_channel_id

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :unilateraltimeout
      - type: u32
      - description:

  :destination
      - type: string
      - description:

  :fee_negotiation_step
      - type: string
      - description:

  :wrong_funding
      - type: outpoint
      - description:

  :force_lease_closed
      - type: boolean
      - description:

  :feerange
      - type: array
      - description:"
  [rpc-info id & opt-params]
  (call rpc-info "close" (merge {:id id} (apply hash-map opt-params))))

(defn commando-blacklist
  "Send commando-blacklist request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :start
      - type: u64
      - description: first rune unique id to blacklist

  :end
      - type: u64
      - description: final rune unique id to blacklist (defaults to start)"
  [rpc-info & opt-params]
  (call rpc-info "commando-blacklist" (apply hash-map opt-params)))

(defn commando-listrunes
  "Send commando-listrunes request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :rune
      - type: string
      - description: optional rune to list"
  [rpc-info & opt-params]
  (call rpc-info "commando-listrunes" (apply hash-map opt-params)))

(defn commando-rune
  "Send commando-rune request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :rune
      - type: string
      - description: optional rune to add to

  :restrictions
      - type: array
      - description: array of restrictions to add to rune

      or

      - type: string
      - description: readonly string to indicate standard readonly restrictions."
  [rpc-info & opt-params]
  (call rpc-info "commando-rune" (apply hash-map opt-params)))

(defn commando
  "Send commando request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  PEER_ID
      - type: pubkey
      - description: peer to command

  METHOD
      - type: string
      - description: method to invoke on peer

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :params
      - type: array
      - description: array of positional parameters

      or

      - type: object
      - description: parameters for method

  :rune
      - type: string
      - description: rune to authorize the command

  :filter
      - type: object
      - description: filter to peer to apply to any successful result"
  [rpc-info peer_id method & opt-params]
  (call rpc-info
        "commando"
        (merge {:peer_id peer_id, :method method} (apply hash-map opt-params))))

(defn connect
  "Send connect request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  ID
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :host
      - type: string
      - description: The hostname of the node.

  :port
      - type: u16
      - description: Port to try connecting to"
  [rpc-info id & opt-params]
  (call rpc-info "connect" (merge {:id id} (apply hash-map opt-params))))

(defn createinvoice
  "Send createinvoice request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  INVSTRING
      - type: string
      - description:

  LABEL
      - type: string
      - description:

  PREIMAGE
      - type: hex
      - description:"
  [rpc-info invstring label preimage]
  (call rpc-info
        "createinvoice"
        {:invstring invstring, :label label, :preimage preimage}))

(defn createonion
  "Send createonion request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  HOPS
      - type: array
      - description:

  ASSOCDATA
      - type: hex
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :session_key
      - type: secret
      - description:

  :onion_size
      - type: u16
      - description:"
  [rpc-info hops assocdata & opt-params]
  (call rpc-info
        "createonion"
        (merge {:hops hops, :assocdata assocdata} (apply hash-map opt-params))))

(defn createrune
  "Send createrune request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :rune
      - type: string
      - description: optional rune to add to

  :restrictions
      - type: array
      - description: array of restrictions to add to rune

      or

      - type: string
      - description: readonly string to indicate standard readonly restrictions."
  [rpc-info & opt-params]
  (call rpc-info "createrune" (apply hash-map opt-params)))

(defn datastore
  "Send datastore request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  KEY
      - type: array
      - description: key is an array of values (though a single value is treated as a one-element array), to form a heirarchy. Using the first element of the key as the plugin name (e.g. [ 'summary' ]) is recommended. A key can either have children or a value, never both: parents are created and removed automatically.

      or

      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :string
      - type: string
      - description:

  :hex
      - type: hex
      - description:

  :mode
      - type: string
      - description:

  :generation
      - type: u64
      - description: If specified, means that the update will fail if the previously-existing data is not exactly that generation. This allows for simple atomicity. This is only legal with mode “must-replace” or “must-append”."
  [rpc-info key & opt-params]
  (call rpc-info "datastore" (merge {:key key} (apply hash-map opt-params))))

(defn datastoreusage
  "Send datastoreusage request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :key
      - type: array
      - description: key is an array of values (though a single value is treated as a one-element array). Used as the starting point to traverse the datastore.

      or

      - type: string
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "datastoreusage" (apply hash-map opt-params)))

(defn decode
  "Send decode request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  STRING
      - type: string
      - description:"
  [rpc-info string]
  (call rpc-info "decode" {:string string}))

(defn decodepay
  "Send decodepay request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  BOLT11
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :description
      - type: string
      - description:"
  [rpc-info bolt11 & opt-params]
  (call rpc-info
        "decodepay"
        (merge {:bolt11 bolt11} (apply hash-map opt-params))))

(defn deldatastore
  "Send deldatastore request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  KEY
      - type: array
      - description: key is an array of values (though a single value is treated as a one-element array), to form a heirarchy. Using the first element of the key as the plugin name (e.g. [ 'summary' ]) is recommended. A key can either have children or a value, never both: parents are created and removed automatically.

      or

      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :generation
      - type: u64
      - description: If specified, means that the update will fail if the previously-existing data is not exactly that generation. This allows for simple atomicity. This is only legal with mode “must-replace” or “must-append”."
  [rpc-info key & opt-params]
  (call rpc-info "deldatastore" (merge {:key key} (apply hash-map opt-params))))

(defn delexpiredinvoice
  "Send delexpiredinvoice request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :maxexpirytime
      - type: u64
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "delexpiredinvoice" (apply hash-map opt-params)))

(defn delforward
  "Send delforward request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :in_channel
      - type: short_channel_id
      - description:

  :in_htlc_id
      - type: u64
      - description:

  :status
      - type: string
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "delforward" (apply hash-map opt-params)))

(defn delinvoice
  "Send delinvoice request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  LABEL
      - type: string
      - description:

      or

      - type: integer
      - description:

  STATUS
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :desconly
      - type: boolean
      - description:"
  [rpc-info label status & opt-params]
  (call rpc-info
        "delinvoice"
        (merge {:label label, :status status} (apply hash-map opt-params))))

(defn delpay
  "Send delpay request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  PAYMENT_HASH
      - type: hash
      - description: the hash of the *payment_preimage* which will prove payment

  STATUS
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :partid
      - type: u64
      - description:

  :groupid
      - type: u64
      - description:"
  [rpc-info payment_hash status & opt-params]
  (call rpc-info
        "delpay"
        (merge {:payment_hash payment_hash, :status status}
               (apply hash-map opt-params))))

(defn disableinvoicerequest
  "Send disableinvoicerequest request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  INVREQ_ID
      - type: string
      - description:"
  [rpc-info invreq_id]
  (call rpc-info "disableinvoicerequest" {:invreq_id invreq_id}))

(defn disconnect
  "Send disconnect request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  ID
      - type: pubkey
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :force
      - type: boolean
      - description:"
  [rpc-info id & opt-params]
  (call rpc-info "disconnect" (merge {:id id} (apply hash-map opt-params))))

(defn emergencyrecover
  "Send emergencyrecover request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details."
  [rpc-info]
  (call rpc-info "emergencyrecover"))

(defn feerates
  "Send feerates request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  STYLE
      - type: string
      - description:"
  [rpc-info style]
  (call rpc-info "feerates" {:style style}))

(defn fetchinvoice
  "Send fetchinvoice request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  OFFER
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :amount_msat
      - type: msat
      - description: amount_msat is required if the offer does not specify an amount at all, otherwise it is optional (but presumably if you set it to less than the offer, you will get an error from the issuer).

  :quantity
      - type: u64
      - description: quantity is is required if the offer specifies quantity_max, otherwise it is not allowed.

  :recurrence_counter
      - type: u64
      - description: recurrence_counter is required if the offer specifies recurrence, otherwise it is not allowed. recurrence_counter should first be set to 0, and incremented for each successive invoice in a given series.

  :recurrence_start
      - type: number
      - description: recurrence_start is required if the offer specifies recurrence_base with start_any_period set, otherwise it is not allowed. It indicates what period number to start at.

  :recurrence_label
      - type: string
      - description: recurrence_label is required if recurrence_counter is set, and otherwise is not allowed. It must be the same as prior fetchinvoice calls for the same recurrence, as it is used to link them together.

  :timeout
      - type: number
      - description: timeout is an optional timeout; if we don't get a reply before this we fail (default, 60 seconds).

  :payer_note
      - type: string
      - description: payer_note is an optional payer note to ask the issuer to include in the fetched invoice."
  [rpc-info offer & opt-params]
  (call rpc-info
        "fetchinvoice"
        (merge {:offer offer} (apply hash-map opt-params))))

(defn fundchannel
  "Send fundchannel request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  ID
      - type: pubkey
      - description: id is the peer id obtained from connect.

  AMOUNT
      - type: msat_or_all
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :utxos
      - type: array
      - description:

  :reserve
      - type: msat
      - description: The amount we want the peer to maintain on its side

  :request_amt
      - type: msat
      - description:

  :push_msat
      - type: msat
      - description:

  :minconf
      - type: u32
      - description:

  :mindepth
      - type: u32
      - description: Number of confirmations required before we consider the channel active

  :feerate
      - type: feerate
      - description:

  :announce
      - type: boolean
      - description:

  :close_to
      - type: string
      - description:

  :compact_lease
      - type: string
      - description:"
  [rpc-info id amount & opt-params]
  (call rpc-info
        "fundchannel"
        (merge {:id id, :amount amount} (apply hash-map opt-params))))

(defn fundpsbt
  "Send fundpsbt request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  SATOSHI
      - type: msat_or_all
      - description:

  FEERATE
      - type: feerate
      - description:

  STARTWEIGHT
      - type: u32
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :reserve
      - type: u32
      - description: reserve is a number: if non-zero number then reserveinputs is called (successfully, with exclusive true) on the returned PSBT for this number of blocks (default: 72).

  :minconf
      - type: u32
      - description:

  :nonwrapped
      - type: boolean
      - description:

  :excess_as_change
      - type: boolean
      - description:

  :locktime
      - type: u32
      - description:

  :opening_anchor_channel
      - type: boolean
      - description:

  :min_witness_weight
      - type: u32
      - description:"
  [rpc-info satoshi feerate startweight & opt-params]
  (call rpc-info
        "fundpsbt"
        (merge {:satoshi satoshi, :feerate feerate, :startweight startweight}
               (apply hash-map opt-params))))

(defn getinfo
  "Send getinfo request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details."
  [rpc-info]
  (call rpc-info "getinfo"))

(defn getroute
  "Send getroute request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  ID
      - type: pubkey
      - description:

  AMOUNT_MSAT
      - type: msat
      - description:

  RISKFACTOR
      - type: u64
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :cltv
      - type: u32
      - description:

  :fromid
      - type: pubkey
      - description:

  :fuzzpercent
      - type: u32
      - description:

  :exclude
      - type: array
      - description:

  :maxhops
      - type: u32
      - description:"
  [rpc-info id amount_msat riskfactor & opt-params]
  (call rpc-info
        "getroute"
        (merge {:id id, :amount_msat amount_msat, :riskfactor riskfactor}
               (apply hash-map opt-params))))

(defn invoice
  "Send invoice request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  AMOUNT_MSAT
      - type: msat_or_any
      - description:

  LABEL
      - type: string
      - description:

      or

      - type: integer
      - description:

  DESCRIPTION
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :expiry
      - type: u64
      - description:

  :deschashonly
      - type: boolean
      - description:

  :cltv
      - type: u32
      - description:

  :preimage
      - type: hex
      - description:

  :exposeprivatechannels
      - type: boolean
      - description:

      or

      - type: array
      - description:

      or

      - type: short_channel_id
      - description:

  :fallbacks
      - type: array
      - description:"
  [rpc-info amount_msat label description & opt-params]
  (call rpc-info
        "invoice"
        (merge
          {:amount_msat amount_msat, :label label, :description description}
          (apply hash-map opt-params))))

(defn invoicerequest
  "Send invoicerequest request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  AMOUNT
      - type: msat
      - description:

  DESCRIPTION
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :issuer
      - type: string
      - description:

  :label
      - type: string
      - description:

  :absolute_expiry
      - type: u64
      - description:

  :single_use
      - type: boolean
      - description:"
  [rpc-info amount description & opt-params]
  (call rpc-info
        "invoicerequest"
        (merge {:amount amount, :description description}
               (apply hash-map opt-params))))

(defn keysend
  "Send keysend request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  DESTINATION
      - type: pubkey
      - description:

  AMOUNT_MSAT
      - type: msat
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :retry_for
      - type: u32
      - description:

  :maxdelay
      - type: u32
      - description:

  :routehints
      - type: array
      - description:

  :label
      - type: string
      - description:

  :exemptfee
      - type: msat
      - description:

  :extratlvs
      - type: object
      - description:

  :maxfeepercent
      - type: number
      - description:"
  [rpc-info destination amount_msat & opt-params]
  (call rpc-info
        "keysend"
        (merge {:destination destination, :amount_msat amount_msat}
               (apply hash-map opt-params))))

(defn listchannels
  "Send listchannels request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :short_channel_id
      - type: short_channel_id
      - description: If short_channel_id is a short channel id, then only known channels with a matching short_channel_id are returned. Otherwise, it must be null.

  :source
      - type: pubkey
      - description: If source is a node id, then only channels leading from that node id are returned.

  :destination
      - type: pubkey
      - description: If destination is a node id, then only channels leading to that node id are returned."
  [rpc-info & opt-params]
  (call rpc-info "listchannels" (apply hash-map opt-params)))

(defn listclosedchannels
  "Send listclosedchannels request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :id
      - type: pubkey
      - description: If supplied, limits the channels to just the peer with the given ID, if it exists."
  [rpc-info & opt-params]
  (call rpc-info "listclosedchannels" (apply hash-map opt-params)))

(defn listdatastore
  "Send listdatastore request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :key
      - type: array
      - description: key is an array of values (though a single value is treated as a one-element array), to form a heirarchy. Using the first element of the key as the plugin name (e.g. [ 'summary' ]) is recommended. A key can either have children or a value, never both: parents are created and removed automatically.

      or

      - type: string
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "listdatastore" (apply hash-map opt-params)))

(defn listforwards
  "Send listforwards request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :status
      - type: string
      - description:

  :in_channel
      - type: short_channel_id
      - description:

  :out_channel
      - type: short_channel_id
      - description:

  :index
      - type: string
      - description:

  :start
      - type: u64
      - description:

  :limit
      - type: u32
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "listforwards" (apply hash-map opt-params)))

(defn listfunds
  "Send listfunds request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :spent
      - type: boolean
      - description: Should outputs that are already spent be included in the result?"
  [rpc-info & opt-params]
  (call rpc-info "listfunds" (apply hash-map opt-params)))

(defn listhtlcs
  "Send listhtlcs request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :id
      - type: string
      - description: channel id or short_channel_id"
  [rpc-info & opt-params]
  (call rpc-info "listhtlcs" (apply hash-map opt-params)))

(defn listinvoicerequests
  "Send listinvoicerequests request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :invreq_id
      - type: string
      - description:

  :active_only
      - type: boolean
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "listinvoicerequests" (apply hash-map opt-params)))

(defn listinvoices
  "Send listinvoices request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :label
      - type: string
      - description:

      or

      - type: integer
      - description:

  :invstring
      - type: string
      - description:

  :payment_hash
      - type: hex
      - description:

  :offer_id
      - type: string
      - description:

  :index
      - type: string
      - description:

  :start
      - type: u64
      - description:

  :limit
      - type: u32
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "listinvoices" (apply hash-map opt-params)))

(defn listnodes
  "Send listnodes request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :id
      - type: pubkey
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "listnodes" (apply hash-map opt-params)))

(defn listpays
  "Send listpays request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :bolt11
      - type: string
      - description:

  :payment_hash
      - type: hash
      - description:

  :status
      - type: string
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "listpays" (apply hash-map opt-params)))

(defn listpeerchannels
  "Send listpeerchannels request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :id
      - type: pubkey
      - description: If supplied, limits the channels to just the peer with the given ID, if it exists."
  [rpc-info & opt-params]
  (call rpc-info "listpeerchannels" (apply hash-map opt-params)))

(defn listpeers
  "Send listpeers request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :id
      - type: pubkey
      - description: If supplied, limits the result to just the peer with the given ID, if it exists.

  :level
      - type: string
      - description: Supplying level will show log entries related to that peer at the given log level. Valid log levels are “io”, “debug”, “info”, and “unusual”."
  [rpc-info & opt-params]
  (call rpc-info "listpeers" (apply hash-map opt-params)))

(defn listsendpays
  "Send listsendpays request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :bolt11
      - type: string
      - description:

  :payment_hash
      - type: hash
      - description:

  :status
      - type: string
      - description:

  :index
      - type: string
      - description:

  :start
      - type: u64
      - description:

  :limit
      - type: u32
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "listsendpays" (apply hash-map opt-params)))

(defn listsqlschemas
  "Send listsqlschemas request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :table
      - type: string
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "listsqlschemas" (apply hash-map opt-params)))

(defn listtransactions
  "Send listtransactions request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details."
  [rpc-info]
  (call rpc-info "listtransactions"))

(defn makesecret
  "Send makesecret request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :hex
      - type: hex
      - description: This will be used for deriving the secret

  :string
      - type: string
      - description: This will be used for deriving the secret"
  [rpc-info & opt-params]
  (call rpc-info "makesecret" (apply hash-map opt-params)))

(defn newaddr
  "Send newaddr request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :addresstype
      - type: string
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "newaddr" (apply hash-map opt-params)))

(defn pay
  "Send pay request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  BOLT11
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :description
      - type: string
      - description:

  :amount_msat
      - type: msat
      - description:

  :exclude
      - type: array
      - description:

  :maxfee
      - type: msat
      - description:

  :retry_for
      - type: u16
      - description:

  :maxdelay
      - type: u16
      - description:

  :localinvreqid
      - type: hex
      - description:

  :riskfactor
      - type: number
      - description:

  :label
      - type: string
      - description:

  :exemptfee
      - type: msat
      - description:

  :maxfeepercent
      - type: number
      - description:"
  [rpc-info bolt11 & opt-params]
  (call rpc-info "pay" (merge {:bolt11 bolt11} (apply hash-map opt-params))))

(defn ping
  "Send ping request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  ID
      - type: pubkey
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :len
      - type: u16
      - description:

  :pongbytes
      - type: u16
      - description:"
  [rpc-info id & opt-params]
  (call rpc-info "ping" (merge {:id id} (apply hash-map opt-params))))

(defn preapproveinvoice
  "Send preapproveinvoice request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  BOLT11
      - type: string
      - description:"
  [rpc-info bolt11]
  (call rpc-info "preapproveinvoice" {:bolt11 bolt11}))

(defn preapprovekeysend
  "Send preapprovekeysend request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  DESTINATION
      - type: pubkey
      - description:

  PAYMENT_HASH
      - type: hex
      - description: the hash of the *payment_preimage* which will prove payment

  AMOUNT_MSAT
      - type: msat
      - description:"
  [rpc-info destination payment_hash amount_msat]
  (call rpc-info
        "preapprovekeysend"
        {:destination destination,
         :payment_hash payment_hash,
         :amount_msat amount_msat}))

(defn recoverchannel
  "Send recoverchannel request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  SCB
      - type: null
      - description:"
  [rpc-info scb & opt-params]
  (call rpc-info
        "recoverchannel"
        (merge {:scb scb} (apply hash-map opt-params))))

(defn sendcustommsg
  "Send sendcustommsg request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  NODE_ID
      - type: pubkey
      - description:

  MSG
      - type: hex
      - description:"
  [rpc-info node_id msg]
  (call rpc-info "sendcustommsg" {:node_id node_id, :msg msg}))

(defn sendonion
  "Send sendonion request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  ONION
      - type: hex
      - description:

  FIRST_HOP
      - type: object
      - description:

  PAYMENT_HASH
      - type: hash
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :amount_msat
      - type: msat
      - description:

  :bolt11
      - type: string
      - description:

  :localinvreqid
      - type: hash
      - description:

  :groupid
      - type: u64
      - description:

  :label
      - type: string
      - description:

  :partid
      - type: u16
      - description:

  :destination
      - type: pubkey
      - description:

  :shared_secrets
      - type: array
      - description:"
  [rpc-info onion first_hop payment_hash & opt-params]
  (call rpc-info
        "sendonion"
        (merge {:onion onion, :first_hop first_hop, :payment_hash payment_hash}
               (apply hash-map opt-params))))

(defn sendpay
  "Send sendpay request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  ROUTE
      - type: array
      - description:

  PAYMENT_HASH
      - type: hash
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :amount_msat
      - type: msat
      - description:

  :bolt11
      - type: string
      - description:

  :localinvreqid
      - type: hex
      - description:

  :payment_secret
      - type: secret
      - description:

  :groupid
      - type: u64
      - description:

  :label
      - type: string
      - description:

  :partid
      - type: u16
      - description:"
  [rpc-info route payment_hash & opt-params]
  (call rpc-info
        "sendpay"
        (merge {:route route, :payment_hash payment_hash}
               (apply hash-map opt-params))))

(defn sendpsbt
  "Send sendpsbt request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  PSBT
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :reserve
      - type: boolean
      - description:"
  [rpc-info psbt & opt-params]
  (call rpc-info "sendpsbt" (merge {:psbt psbt} (apply hash-map opt-params))))

(defn setchannel
  "Send setchannel request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  ID
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :feebase
      - type: msat
      - description:

  :feeppm
      - type: u32
      - description:

  :htlcmin
      - type: msat
      - description:

  :htlcmax
      - type: msat
      - description:

  :enforcedelay
      - type: u32
      - description:

  :ignorefeelimits
      - type: boolean
      - description:"
  [rpc-info id & opt-params]
  (call rpc-info "setchannel" (merge {:id id} (apply hash-map opt-params))))

(defn setconfig
  "Send setconfig request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  CONFIG
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :val
      - type: null
      - description:"
  [rpc-info config & opt-params]
  (call rpc-info
        "setconfig"
        (merge {:config config} (apply hash-map opt-params))))

(defn showrunes
  "Send showrunes request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :rune
      - type: string
      - description: optional rune to list"
  [rpc-info & opt-params]
  (call rpc-info "showrunes" (apply hash-map opt-params)))

(defn signinvoice
  "Send signinvoice request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  INVSTRING
      - type: string
      - description:"
  [rpc-info invstring]
  (call rpc-info "signinvoice" {:invstring invstring}))

(defn signmessage
  "Send signmessage request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  MESSAGE
      - type: string
      - description:"
  [rpc-info message]
  (call rpc-info "signmessage" {:message message}))

(defn signpsbt
  "Send signpsbt request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  PSBT
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :signonly
      - type: array
      - description:"
  [rpc-info psbt & opt-params]
  (call rpc-info "signpsbt" (merge {:psbt psbt} (apply hash-map opt-params))))

(defn splice_init
  "Send splice_init request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  CHANNEL_ID
      - type: string
      - description: the channel id of the channel to be spliced

  RELATIVE_AMOUNT
      - type: integer
      - description: a positive or negative amount of satoshis to add or subtract from the channel

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :initialpsbt
      - type: string
      - description: the (optional) base 64 encoded PSBT to begin with. If not specified, one will be generated automatically

  :feerate_per_kw
      - type: u32
      - description: the miner fee we promise our peer to pay for our side of the splice transaction. It is calculated by `feerate_per_kw` * our_bytes_in_splice_tx / 1000

  :force_feerate
      - type: boolean
      - description: By default splices will fail if the fee provided looks too high. This is to protect against accidentally setting your fee higher than intended. Set `force_feerate` to true to skip this saftey check"
  [rpc-info channel_id relative_amount & opt-params]
  (call rpc-info
        "splice_init"
        (merge {:channel_id channel_id, :relative_amount relative_amount}
               (apply hash-map opt-params))))

(defn splice_signed
  "Send splice_signed request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  CHANNEL_ID
      - type: string
      - description: the channel id of the channel to be spliced

  PSBT
      - type: string
      - description: the final version of the psbt to complete the splice with

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :sign_first
      - type: boolean
      - description: a flag that makes our node offer the final splice signature first (defaults to false). When false, the node will calculate who should sign first based off who is adding inputting the least sats to the splice as per spec"
  [rpc-info channel_id psbt & opt-params]
  (call rpc-info
        "splice_signed"
        (merge {:channel_id channel_id, :psbt psbt}
               (apply hash-map opt-params))))

(defn splice_update
  "Send splice_update request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  CHANNEL_ID
      - type: string
      - description: the channel id of the channel to be spliced

  PSBT
      - type: string
      - description: the (optional) base 64 encoded PSBT to begin with. If not specified, one will be generated automatically"
  [rpc-info channel_id psbt]
  (call rpc-info "splice_update" {:channel_id channel_id, :psbt psbt}))

(defn sql
  "Send sql request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  QUERY
      - type: string
      - description:"
  [rpc-info query]
  (call rpc-info "sql" {:query query}))

(defn staticbackup
  "Send staticbackup request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details."
  [rpc-info]
  (call rpc-info "staticbackup"))

(defn stop
  "Send stop request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details."
  [rpc-info]
  (call rpc-info "stop"))

(defn txdiscard
  "Send txdiscard request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  TXID
      - type: txid
      - description:"
  [rpc-info txid]
  (call rpc-info "txdiscard" {:txid txid}))

(defn txprepare
  "Send txprepare request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  OUTPUTS
      - type: array
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :feerate
      - type: feerate
      - description:

  :minconf
      - type: u32
      - description:

  :utxos
      - type: array
      - description:"
  [rpc-info outputs & opt-params]
  (call rpc-info
        "txprepare"
        (merge {:outputs outputs} (apply hash-map opt-params))))

(defn txsend
  "Send txsend request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  TXID
      - type: txid
      - description:"
  [rpc-info txid]
  (call rpc-info "txsend" {:txid txid}))

(defn upgradewallet
  "Send upgradewallet request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :feerate
      - type: feerate
      - description: Feerate for the upgrade transaction

  :reservedok
      - type: boolean
      - description: Include already reserved funds or not"
  [rpc-info & opt-params]
  (call rpc-info "upgradewallet" (apply hash-map opt-params)))

(defn utxopsbt
  "Send utxopsbt request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  SATOSHI
      - type: msat
      - description:

  FEERATE
      - type: feerate
      - description:

  STARTWEIGHT
      - type: u32
      - description:

  UTXOS
      - type: array
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :reservedok
      - type: boolean
      - description:

  :reserve
      - type: u32
      - description: reserve is a number: if non-zero number then reserveinputs is called (successfully, with exclusive true) on the returned PSBT for this number of blocks (default: 72).

  :excess_as_change
      - type: boolean
      - description:

  :locktime
      - type: u32
      - description:

  :opening_anchor_channel
      - type: boolean
      - description:

  :min_witness_weight
      - type: u32
      - description:"
  [rpc-info satoshi feerate startweight utxos & opt-params]
  (call rpc-info
        "utxopsbt"
        (merge {:satoshi satoshi,
                :feerate feerate,
                :startweight startweight,
                :utxos utxos}
               (apply hash-map opt-params))))

(defn wait
  "Send wait request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  SUBSYSTEM
      - type: string
      - description:

  INDEXNAME
      - type: string
      - description:

  NEXTVALUE
      - type: u64
      - description:"
  [rpc-info subsystem indexname nextvalue]
  (call rpc-info
        "wait"
        {:subsystem subsystem, :indexname indexname, :nextvalue nextvalue}))

(defn waitanyinvoice
  "Send waitanyinvoice request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :lastpay_index
      - type: u64
      - description:

  :timeout
      - type: u64
      - description:"
  [rpc-info & opt-params]
  (call rpc-info "waitanyinvoice" (apply hash-map opt-params)))

(defn waitblockheight
  "Send waitblockheight request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  BLOCKHEIGHT
      - type: u32
      - description: The current block height (>= blockheight parameter)

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :timeout
      - type: u32
      - description: If timeout seconds is reached without the specified blockheight being reached, this command will fail with a code of 2000."
  [rpc-info blockheight & opt-params]
  (call rpc-info
        "waitblockheight"
        (merge {:blockheight blockheight} (apply hash-map opt-params))))

(defn waitinvoice
  "Send waitinvoice request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  LABEL
      - type: string
      - description:"
  [rpc-info label]
  (call rpc-info "waitinvoice" {:label label}))

(defn waitsendpay
  "Send waitsendpay request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  PAYMENT_HASH
      - type: hash
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :timeout
      - type: u32
      - description:

  :partid
      - type: u64
      - description:

  :groupid
      - type: u64
      - description:"
  [rpc-info payment_hash & opt-params]
  (call rpc-info
        "waitsendpay"
        (merge {:payment_hash payment_hash} (apply hash-map opt-params))))

(defn withdraw
  "Send withdraw request to lightningd via unix socket.

  The connection is done via :socket-file specified in RPC-INFO.
  :json-id-prefix key of RPC-INFO is used as the first part of
  the JSON-RPC request id.  See clnrpc-clj/call for more details.

  DESTINATION
      - type: string
      - description:

  Use OPT-PARAMS to set optional parameters of the request.
  The following keyword argument(s) can be passed with values:

  :satoshi
      - type: msat_or_all
      - description:

  :feerate
      - type: feerate
      - description:

  :minconf
      - type: u16
      - description:

  :utxos
      - type: array
      - description:"
  [rpc-info destination & opt-params]
  (call rpc-info
        "withdraw"
        (merge {:destination destination} (apply hash-map opt-params))))
